﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms;
using Microsoft.ML;

namespace CarPricePredictor
{
    public partial class CarPrediction
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms
				.Categorical.OneHotEncoding(new []{new InputOutputColumnPair(@"brand", @"brand"),new InputOutputColumnPair(@"model", @"model"),new InputOutputColumnPair(@"gearType", @"gearType"),new InputOutputColumnPair(@"color", @"color")}, outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"year", @"year"),new InputOutputColumnPair(@"totalKm", @"totalKm"),new InputOutputColumnPair(@"HorsePowers", @"HorsePowers")}))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"fuelType",outputColumnName:@"fuelType"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"brand",@"model",@"gearType",@"color",@"year",@"totalKm",@"HorsePowers",@"fuelType"}))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.Regression.Trainers.FastTreeTweedie(new FastTreeTweedieTrainer.Options(){NumberOfLeaves=4,MinimumExampleCountPerLeaf=7,NumberOfTrees=176,MaximumBinCountPerFeature=117,FeatureFraction=0.682447095014607,LearningRate=0.999999776672986,LabelColumnName=@"price",FeatureColumnName=@"Features"}));

            return pipeline;
        }
    }
}
